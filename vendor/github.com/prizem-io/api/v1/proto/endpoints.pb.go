// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: endpoints.proto

package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type EndpointsRequest struct {
	NodeID  string `protobuf:"bytes,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	Version int64  `protobuf:"varint,2,opt,name=version,proto3" json:"version,omitempty"`
}

func (m *EndpointsRequest) Reset()                    { *m = EndpointsRequest{} }
func (m *EndpointsRequest) String() string            { return proto1.CompactTextString(m) }
func (*EndpointsRequest) ProtoMessage()               {}
func (*EndpointsRequest) Descriptor() ([]byte, []int) { return fileDescriptorEndpoints, []int{0} }

type EndpointsCatalog struct {
	UseCache bool   `protobuf:"varint,1,opt,name=use_cache,json=useCache,proto3" json:"use_cache,omitempty"`
	Version  int64  `protobuf:"varint,2,opt,name=version,proto3" json:"version,omitempty"`
	Nodes    []Node `protobuf:"bytes,3,rep,name=nodes" json:"nodes"`
}

func (m *EndpointsCatalog) Reset()                    { *m = EndpointsCatalog{} }
func (m *EndpointsCatalog) String() string            { return proto1.CompactTextString(m) }
func (*EndpointsCatalog) ProtoMessage()               {}
func (*EndpointsCatalog) Descriptor() ([]byte, []int) { return fileDescriptorEndpoints, []int{1} }

type Node struct {
	ID         string            `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Geography  string            `protobuf:"bytes,2,opt,name=geography,proto3" json:"geography,omitempty"`
	Datacenter string            `protobuf:"bytes,3,opt,name=datacenter,proto3" json:"datacenter,omitempty"`
	Address    string            `protobuf:"bytes,4,opt,name=address,proto3" json:"address,omitempty"`
	Metadata   Attributes        `protobuf:"bytes,5,opt,name=metadata" json:"metadata"`
	Services   []ServiceInstance `protobuf:"bytes,6,rep,name=services" json:"services"`
}

func (m *Node) Reset()                    { *m = Node{} }
func (m *Node) String() string            { return proto1.CompactTextString(m) }
func (*Node) ProtoMessage()               {}
func (*Node) Descriptor() ([]byte, []int) { return fileDescriptorEndpoints, []int{2} }

type ServiceInstance struct {
	ID        string     `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Service   string     `protobuf:"bytes,2,opt,name=service,proto3" json:"service,omitempty"`
	Name      string     `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Namespace string     `protobuf:"bytes,4,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Principal string     `protobuf:"bytes,5,opt,name=principal,proto3" json:"principal,omitempty"`
	Owner     string     `protobuf:"bytes,6,opt,name=owner,proto3" json:"owner,omitempty"`
	Container *Container `protobuf:"bytes,7,opt,name=container" json:"container,omitempty"`
	Ports     []Port     `protobuf:"bytes,8,rep,name=ports" json:"ports"`
	Metadata  Attributes `protobuf:"bytes,9,opt,name=metadata" json:"metadata"`
	Labels    []string   `protobuf:"bytes,10,rep,name=labels" json:"labels,omitempty"`
}

func (m *ServiceInstance) Reset()                    { *m = ServiceInstance{} }
func (m *ServiceInstance) String() string            { return proto1.CompactTextString(m) }
func (*ServiceInstance) ProtoMessage()               {}
func (*ServiceInstance) Descriptor() ([]byte, []int) { return fileDescriptorEndpoints, []int{3} }

type Container struct {
	Name  string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Image string `protobuf:"bytes,2,opt,name=image,proto3" json:"image,omitempty"`
}

func (m *Container) Reset()                    { *m = Container{} }
func (m *Container) String() string            { return proto1.CompactTextString(m) }
func (*Container) ProtoMessage()               {}
func (*Container) Descriptor() ([]byte, []int) { return fileDescriptorEndpoints, []int{4} }

type Port struct {
	Port     int32  `protobuf:"varint,1,opt,name=port,proto3" json:"port,omitempty"`
	Protocol string `protobuf:"bytes,2,opt,name=protocol,proto3" json:"protocol,omitempty"`
	Secure   bool   `protobuf:"varint,3,opt,name=secure,proto3" json:"secure,omitempty"`
}

func (m *Port) Reset()                    { *m = Port{} }
func (m *Port) String() string            { return proto1.CompactTextString(m) }
func (*Port) ProtoMessage()               {}
func (*Port) Descriptor() ([]byte, []int) { return fileDescriptorEndpoints, []int{5} }

func init() {
	proto1.RegisterType((*EndpointsRequest)(nil), "prizem.api.v1.EndpointsRequest")
	proto1.RegisterType((*EndpointsCatalog)(nil), "prizem.api.v1.EndpointsCatalog")
	proto1.RegisterType((*Node)(nil), "prizem.api.v1.Node")
	proto1.RegisterType((*ServiceInstance)(nil), "prizem.api.v1.ServiceInstance")
	proto1.RegisterType((*Container)(nil), "prizem.api.v1.Container")
	proto1.RegisterType((*Port)(nil), "prizem.api.v1.Port")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for EndpointDiscovery service

type EndpointDiscoveryClient interface {
	GetEndpoints(ctx context.Context, in *EndpointsRequest, opts ...grpc.CallOption) (*EndpointsCatalog, error)
	StreamEndpoints(ctx context.Context, opts ...grpc.CallOption) (EndpointDiscovery_StreamEndpointsClient, error)
}

type endpointDiscoveryClient struct {
	cc *grpc.ClientConn
}

func NewEndpointDiscoveryClient(cc *grpc.ClientConn) EndpointDiscoveryClient {
	return &endpointDiscoveryClient{cc}
}

func (c *endpointDiscoveryClient) GetEndpoints(ctx context.Context, in *EndpointsRequest, opts ...grpc.CallOption) (*EndpointsCatalog, error) {
	out := new(EndpointsCatalog)
	err := grpc.Invoke(ctx, "/prizem.api.v1.EndpointDiscovery/GetEndpoints", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *endpointDiscoveryClient) StreamEndpoints(ctx context.Context, opts ...grpc.CallOption) (EndpointDiscovery_StreamEndpointsClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_EndpointDiscovery_serviceDesc.Streams[0], c.cc, "/prizem.api.v1.EndpointDiscovery/StreamEndpoints", opts...)
	if err != nil {
		return nil, err
	}
	x := &endpointDiscoveryStreamEndpointsClient{stream}
	return x, nil
}

type EndpointDiscovery_StreamEndpointsClient interface {
	Send(*EndpointsRequest) error
	Recv() (*EndpointsCatalog, error)
	grpc.ClientStream
}

type endpointDiscoveryStreamEndpointsClient struct {
	grpc.ClientStream
}

func (x *endpointDiscoveryStreamEndpointsClient) Send(m *EndpointsRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *endpointDiscoveryStreamEndpointsClient) Recv() (*EndpointsCatalog, error) {
	m := new(EndpointsCatalog)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for EndpointDiscovery service

type EndpointDiscoveryServer interface {
	GetEndpoints(context.Context, *EndpointsRequest) (*EndpointsCatalog, error)
	StreamEndpoints(EndpointDiscovery_StreamEndpointsServer) error
}

func RegisterEndpointDiscoveryServer(s *grpc.Server, srv EndpointDiscoveryServer) {
	s.RegisterService(&_EndpointDiscovery_serviceDesc, srv)
}

func _EndpointDiscovery_GetEndpoints_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EndpointsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EndpointDiscoveryServer).GetEndpoints(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/prizem.api.v1.EndpointDiscovery/GetEndpoints",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EndpointDiscoveryServer).GetEndpoints(ctx, req.(*EndpointsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EndpointDiscovery_StreamEndpoints_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(EndpointDiscoveryServer).StreamEndpoints(&endpointDiscoveryStreamEndpointsServer{stream})
}

type EndpointDiscovery_StreamEndpointsServer interface {
	Send(*EndpointsCatalog) error
	Recv() (*EndpointsRequest, error)
	grpc.ServerStream
}

type endpointDiscoveryStreamEndpointsServer struct {
	grpc.ServerStream
}

func (x *endpointDiscoveryStreamEndpointsServer) Send(m *EndpointsCatalog) error {
	return x.ServerStream.SendMsg(m)
}

func (x *endpointDiscoveryStreamEndpointsServer) Recv() (*EndpointsRequest, error) {
	m := new(EndpointsRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _EndpointDiscovery_serviceDesc = grpc.ServiceDesc{
	ServiceName: "prizem.api.v1.EndpointDiscovery",
	HandlerType: (*EndpointDiscoveryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetEndpoints",
			Handler:    _EndpointDiscovery_GetEndpoints_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamEndpoints",
			Handler:       _EndpointDiscovery_StreamEndpoints_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "endpoints.proto",
}

func (m *EndpointsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EndpointsRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.NodeID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintEndpoints(dAtA, i, uint64(len(m.NodeID)))
		i += copy(dAtA[i:], m.NodeID)
	}
	if m.Version != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintEndpoints(dAtA, i, uint64(m.Version))
	}
	return i, nil
}

func (m *EndpointsCatalog) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EndpointsCatalog) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UseCache {
		dAtA[i] = 0x8
		i++
		if m.UseCache {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Version != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintEndpoints(dAtA, i, uint64(m.Version))
	}
	if len(m.Nodes) > 0 {
		for _, msg := range m.Nodes {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintEndpoints(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *Node) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Node) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintEndpoints(dAtA, i, uint64(len(m.ID)))
		i += copy(dAtA[i:], m.ID)
	}
	if len(m.Geography) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintEndpoints(dAtA, i, uint64(len(m.Geography)))
		i += copy(dAtA[i:], m.Geography)
	}
	if len(m.Datacenter) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintEndpoints(dAtA, i, uint64(len(m.Datacenter)))
		i += copy(dAtA[i:], m.Datacenter)
	}
	if len(m.Address) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintEndpoints(dAtA, i, uint64(len(m.Address)))
		i += copy(dAtA[i:], m.Address)
	}
	dAtA[i] = 0x2a
	i++
	i = encodeVarintEndpoints(dAtA, i, uint64(m.Metadata.Size()))
	n1, err := m.Metadata.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	if len(m.Services) > 0 {
		for _, msg := range m.Services {
			dAtA[i] = 0x32
			i++
			i = encodeVarintEndpoints(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ServiceInstance) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServiceInstance) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintEndpoints(dAtA, i, uint64(len(m.ID)))
		i += copy(dAtA[i:], m.ID)
	}
	if len(m.Service) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintEndpoints(dAtA, i, uint64(len(m.Service)))
		i += copy(dAtA[i:], m.Service)
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintEndpoints(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Namespace) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintEndpoints(dAtA, i, uint64(len(m.Namespace)))
		i += copy(dAtA[i:], m.Namespace)
	}
	if len(m.Principal) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintEndpoints(dAtA, i, uint64(len(m.Principal)))
		i += copy(dAtA[i:], m.Principal)
	}
	if len(m.Owner) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintEndpoints(dAtA, i, uint64(len(m.Owner)))
		i += copy(dAtA[i:], m.Owner)
	}
	if m.Container != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintEndpoints(dAtA, i, uint64(m.Container.Size()))
		n2, err := m.Container.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if len(m.Ports) > 0 {
		for _, msg := range m.Ports {
			dAtA[i] = 0x42
			i++
			i = encodeVarintEndpoints(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	dAtA[i] = 0x4a
	i++
	i = encodeVarintEndpoints(dAtA, i, uint64(m.Metadata.Size()))
	n3, err := m.Metadata.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n3
	if len(m.Labels) > 0 {
		for _, s := range m.Labels {
			dAtA[i] = 0x52
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *Container) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Container) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintEndpoints(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Image) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintEndpoints(dAtA, i, uint64(len(m.Image)))
		i += copy(dAtA[i:], m.Image)
	}
	return i, nil
}

func (m *Port) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Port) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Port != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintEndpoints(dAtA, i, uint64(m.Port))
	}
	if len(m.Protocol) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintEndpoints(dAtA, i, uint64(len(m.Protocol)))
		i += copy(dAtA[i:], m.Protocol)
	}
	if m.Secure {
		dAtA[i] = 0x18
		i++
		if m.Secure {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func encodeVarintEndpoints(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *EndpointsRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.NodeID)
	if l > 0 {
		n += 1 + l + sovEndpoints(uint64(l))
	}
	if m.Version != 0 {
		n += 1 + sovEndpoints(uint64(m.Version))
	}
	return n
}

func (m *EndpointsCatalog) Size() (n int) {
	var l int
	_ = l
	if m.UseCache {
		n += 2
	}
	if m.Version != 0 {
		n += 1 + sovEndpoints(uint64(m.Version))
	}
	if len(m.Nodes) > 0 {
		for _, e := range m.Nodes {
			l = e.Size()
			n += 1 + l + sovEndpoints(uint64(l))
		}
	}
	return n
}

func (m *Node) Size() (n int) {
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovEndpoints(uint64(l))
	}
	l = len(m.Geography)
	if l > 0 {
		n += 1 + l + sovEndpoints(uint64(l))
	}
	l = len(m.Datacenter)
	if l > 0 {
		n += 1 + l + sovEndpoints(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovEndpoints(uint64(l))
	}
	l = m.Metadata.Size()
	n += 1 + l + sovEndpoints(uint64(l))
	if len(m.Services) > 0 {
		for _, e := range m.Services {
			l = e.Size()
			n += 1 + l + sovEndpoints(uint64(l))
		}
	}
	return n
}

func (m *ServiceInstance) Size() (n int) {
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovEndpoints(uint64(l))
	}
	l = len(m.Service)
	if l > 0 {
		n += 1 + l + sovEndpoints(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovEndpoints(uint64(l))
	}
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovEndpoints(uint64(l))
	}
	l = len(m.Principal)
	if l > 0 {
		n += 1 + l + sovEndpoints(uint64(l))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovEndpoints(uint64(l))
	}
	if m.Container != nil {
		l = m.Container.Size()
		n += 1 + l + sovEndpoints(uint64(l))
	}
	if len(m.Ports) > 0 {
		for _, e := range m.Ports {
			l = e.Size()
			n += 1 + l + sovEndpoints(uint64(l))
		}
	}
	l = m.Metadata.Size()
	n += 1 + l + sovEndpoints(uint64(l))
	if len(m.Labels) > 0 {
		for _, s := range m.Labels {
			l = len(s)
			n += 1 + l + sovEndpoints(uint64(l))
		}
	}
	return n
}

func (m *Container) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovEndpoints(uint64(l))
	}
	l = len(m.Image)
	if l > 0 {
		n += 1 + l + sovEndpoints(uint64(l))
	}
	return n
}

func (m *Port) Size() (n int) {
	var l int
	_ = l
	if m.Port != 0 {
		n += 1 + sovEndpoints(uint64(m.Port))
	}
	l = len(m.Protocol)
	if l > 0 {
		n += 1 + l + sovEndpoints(uint64(l))
	}
	if m.Secure {
		n += 2
	}
	return n
}

func sovEndpoints(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozEndpoints(x uint64) (n int) {
	return sovEndpoints(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *EndpointsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEndpoints
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EndpointsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EndpointsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndpoints
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEndpoints
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndpoints
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEndpoints(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEndpoints
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EndpointsCatalog) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEndpoints
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EndpointsCatalog: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EndpointsCatalog: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UseCache", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndpoints
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UseCache = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndpoints
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nodes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndpoints
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEndpoints
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nodes = append(m.Nodes, Node{})
			if err := m.Nodes[len(m.Nodes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEndpoints(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEndpoints
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Node) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEndpoints
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Node: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Node: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndpoints
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEndpoints
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Geography", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndpoints
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEndpoints
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Geography = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Datacenter", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndpoints
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEndpoints
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Datacenter = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndpoints
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEndpoints
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndpoints
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEndpoints
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Services", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndpoints
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEndpoints
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Services = append(m.Services, ServiceInstance{})
			if err := m.Services[len(m.Services)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEndpoints(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEndpoints
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ServiceInstance) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEndpoints
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServiceInstance: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServiceInstance: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndpoints
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEndpoints
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Service", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndpoints
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEndpoints
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Service = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndpoints
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEndpoints
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndpoints
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEndpoints
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Principal", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndpoints
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEndpoints
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Principal = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndpoints
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEndpoints
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Container", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndpoints
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEndpoints
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Container == nil {
				m.Container = &Container{}
			}
			if err := m.Container.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ports", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndpoints
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEndpoints
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ports = append(m.Ports, Port{})
			if err := m.Ports[len(m.Ports)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndpoints
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEndpoints
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Labels", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndpoints
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEndpoints
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Labels = append(m.Labels, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEndpoints(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEndpoints
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Container) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEndpoints
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Container: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Container: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndpoints
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEndpoints
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Image", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndpoints
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEndpoints
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Image = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEndpoints(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEndpoints
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Port) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEndpoints
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Port: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Port: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Port", wireType)
			}
			m.Port = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndpoints
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Port |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Protocol", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndpoints
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEndpoints
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Protocol = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Secure", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndpoints
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Secure = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipEndpoints(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEndpoints
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEndpoints(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEndpoints
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEndpoints
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEndpoints
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthEndpoints
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowEndpoints
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipEndpoints(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthEndpoints = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEndpoints   = fmt.Errorf("proto: integer overflow")
)

func init() { proto1.RegisterFile("endpoints.proto", fileDescriptorEndpoints) }

var fileDescriptorEndpoints = []byte{
	// 627 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x54, 0x3d, 0x6f, 0xd3, 0x40,
	0x18, 0x8e, 0xf3, 0xe1, 0xd8, 0x6f, 0x41, 0x2d, 0x47, 0x55, 0x99, 0x80, 0x9c, 0xc8, 0x5d, 0xb2,
	0x90, 0x42, 0x11, 0x2c, 0x2c, 0xd0, 0x16, 0xa1, 0x2c, 0x15, 0xb8, 0x13, 0x2c, 0xd5, 0xc5, 0x7e,
	0x71, 0x4f, 0x4a, 0x7c, 0xe6, 0xee, 0x1c, 0xd4, 0xfe, 0x12, 0x7e, 0x02, 0xbf, 0x83, 0xa9, 0x23,
	0xbf, 0xa0, 0xa2, 0x61, 0x60, 0x65, 0x61, 0x47, 0x77, 0xfe, 0x48, 0x1b, 0xd1, 0x01, 0x89, 0xc9,
	0xf7, 0xdc, 0xfb, 0x71, 0xcf, 0xf3, 0xdc, 0xbd, 0x86, 0x75, 0x4c, 0xe3, 0x8c, 0xb3, 0x54, 0xc9,
	0x51, 0x26, 0xb8, 0xe2, 0xe4, 0x76, 0x26, 0xd8, 0x19, 0xce, 0x46, 0x34, 0x63, 0xa3, 0xf9, 0xe3,
	0xde, 0xc3, 0x84, 0xa9, 0x93, 0x7c, 0x32, 0x8a, 0xf8, 0x6c, 0x27, 0xe1, 0x09, 0xdf, 0x31, 0x59,
	0x93, 0xfc, 0x83, 0x41, 0x06, 0x98, 0x55, 0x51, 0xdd, 0xdb, 0xa0, 0x4a, 0x09, 0x36, 0xc9, 0x15,
	0x96, 0xfd, 0x82, 0xb7, 0xb0, 0xf1, 0xaa, 0x3a, 0x22, 0xc4, 0x8f, 0x39, 0x4a, 0x45, 0xb6, 0xa1,
	0x9b, 0xf2, 0x18, 0x8f, 0x59, 0xec, 0x59, 0x03, 0x6b, 0xe8, 0xee, 0xc1, 0xe2, 0xa2, 0x6f, 0x1f,
	0xf2, 0x18, 0xc7, 0x07, 0xa1, 0xad, 0x43, 0xe3, 0x98, 0x78, 0xd0, 0x9d, 0xa3, 0x90, 0x8c, 0xa7,
	0x5e, 0x73, 0x60, 0x0d, 0x5b, 0x61, 0x05, 0x83, 0xb3, 0x2b, 0x2d, 0xf7, 0xa9, 0xa2, 0x53, 0x9e,
	0x90, 0xfb, 0xe0, 0xe6, 0x12, 0x8f, 0x23, 0x1a, 0x9d, 0xa0, 0x69, 0xea, 0x84, 0x4e, 0x2e, 0x71,
	0x5f, 0xe3, 0x9b, 0x5b, 0x91, 0x1d, 0xe8, 0xe8, 0xe3, 0xa4, 0xd7, 0x1a, 0xb4, 0x86, 0x6b, 0xbb,
	0x77, 0x47, 0xd7, 0xd4, 0x8f, 0x34, 0xa5, 0xbd, 0xf6, 0xf9, 0x45, 0xbf, 0x11, 0x16, 0x79, 0xc1,
	0x6f, 0x0b, 0xda, 0x7a, 0x97, 0x6c, 0x41, 0xb3, 0xa6, 0x6f, 0x2f, 0x2e, 0xfa, 0xcd, 0xf1, 0x41,
	0xd8, 0x64, 0x31, 0x79, 0x00, 0x6e, 0x82, 0x3c, 0x11, 0x34, 0x3b, 0x39, 0x35, 0xa7, 0xb9, 0xe1,
	0x72, 0x83, 0xf8, 0x00, 0x31, 0x55, 0x34, 0xc2, 0x54, 0xa1, 0xf0, 0x5a, 0x26, 0x7c, 0x65, 0x47,
	0x33, 0xa5, 0x71, 0x2c, 0x50, 0x4a, 0xaf, 0x6d, 0x82, 0x15, 0x24, 0xcf, 0xc1, 0x99, 0xa1, 0xa2,
	0x3a, 0xd7, 0xeb, 0x0c, 0xac, 0xe1, 0xda, 0xee, 0xbd, 0x15, 0xb2, 0x2f, 0x6b, 0xeb, 0x4b, 0xca,
	0x75, 0x01, 0x79, 0x01, 0x8e, 0x44, 0x31, 0x67, 0x11, 0x4a, 0xcf, 0x36, 0x4a, 0xfd, 0x95, 0xe2,
	0xa3, 0x22, 0x3c, 0x4e, 0xa5, 0xa2, 0x69, 0x54, 0x89, 0xae, 0xab, 0x82, 0x9f, 0x4d, 0x58, 0x5f,
	0xc9, 0xb9, 0xd1, 0x02, 0x0f, 0xba, 0x65, 0x5d, 0x69, 0x40, 0x05, 0x09, 0x81, 0x76, 0x4a, 0x67,
	0x58, 0x0a, 0x37, 0x6b, 0x6d, 0x98, 0xfe, 0xca, 0x8c, 0x46, 0x58, 0x8a, 0x5e, 0x6e, 0xe8, 0x68,
	0x26, 0x58, 0x1a, 0xb1, 0x8c, 0x4e, 0x8d, 0x6e, 0x37, 0x5c, 0x6e, 0x90, 0x4d, 0xe8, 0xf0, 0x4f,
	0x29, 0x0a, 0xcf, 0x36, 0x91, 0x02, 0x90, 0x67, 0xe0, 0x46, 0x3c, 0x55, 0x94, 0xe9, 0x48, 0xd7,
	0x78, 0xe5, 0xad, 0xc8, 0xdd, 0xaf, 0xe2, 0xe1, 0x32, 0x55, 0x3f, 0x86, 0x8c, 0x0b, 0x25, 0x3d,
	0xe7, 0xaf, 0x8f, 0xe1, 0x0d, 0x17, 0xaa, 0x7a, 0x0c, 0x26, 0xef, 0xda, 0x9d, 0xb8, 0xff, 0x7a,
	0x27, 0x5b, 0x60, 0x4f, 0xe9, 0x04, 0xa7, 0xd2, 0x83, 0x41, 0x6b, 0xe8, 0x86, 0x25, 0x0a, 0x9e,
	0x82, 0x5b, 0xb3, 0xab, 0x0d, 0xb3, 0xae, 0x18, 0xb6, 0x09, 0x1d, 0x36, 0xa3, 0x49, 0x65, 0x6e,
	0x01, 0x82, 0x43, 0x68, 0x6b, 0x82, 0xba, 0x42, 0x93, 0x33, 0x15, 0x9d, 0xd0, 0xac, 0x49, 0x0f,
	0x1c, 0x33, 0x8c, 0x11, 0x9f, 0x96, 0x45, 0x35, 0xd6, 0x34, 0x24, 0x46, 0xb9, 0x28, 0x2e, 0xc5,
	0x09, 0x4b, 0xb4, 0xfb, 0xd5, 0x82, 0x3b, 0xd5, 0x94, 0x1d, 0x30, 0x19, 0xf1, 0x39, 0x8a, 0x53,
	0x12, 0xc2, 0xad, 0xd7, 0xa8, 0xea, 0xe9, 0x23, 0xfd, 0x15, 0xbd, 0xab, 0xa3, 0xde, 0xbb, 0x31,
	0xa1, 0x1c, 0xdc, 0xa0, 0x41, 0xde, 0xc1, 0xfa, 0x91, 0x12, 0x48, 0x67, 0xff, 0xb5, 0xed, 0xd0,
	0x7a, 0x64, 0xed, 0x6d, 0x9f, 0x5f, 0xfa, 0x8d, 0x5f, 0x97, 0x7e, 0xe3, 0xcb, 0xc2, 0x6f, 0x9c,
	0x2f, 0x7c, 0xeb, 0xdb, 0xc2, 0xb7, 0xbe, 0x2f, 0x7c, 0xeb, 0xf3, 0x0f, 0xbf, 0xf1, 0xbe, 0x53,
	0xfc, 0xcb, 0x6c, 0xf3, 0x79, 0xf2, 0x27, 0x00, 0x00, 0xff, 0xff, 0xc4, 0x62, 0x65, 0xe6, 0x0b,
	0x05, 0x00, 0x00,
}
