// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: routes.proto

package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import _ "github.com/gogo/protobuf/types"

import time "time"

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

import types "github.com/gogo/protobuf/types"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

type RoutesRequest struct {
	NodeID  string `protobuf:"bytes,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	Version int64  `protobuf:"varint,2,opt,name=version,proto3" json:"version,omitempty"`
}

func (m *RoutesRequest) Reset()                    { *m = RoutesRequest{} }
func (m *RoutesRequest) String() string            { return proto1.CompactTextString(m) }
func (*RoutesRequest) ProtoMessage()               {}
func (*RoutesRequest) Descriptor() ([]byte, []int) { return fileDescriptorRoutes, []int{0} }

type RoutesCatalog struct {
	UseCache bool      `protobuf:"varint,1,opt,name=use_cache,json=useCache,proto3" json:"use_cache,omitempty"`
	Version  int64     `protobuf:"varint,2,opt,name=version,proto3" json:"version,omitempty"`
	Services []Service `protobuf:"bytes,3,rep,name=services" json:"services"`
}

func (m *RoutesCatalog) Reset()                    { *m = RoutesCatalog{} }
func (m *RoutesCatalog) String() string            { return proto1.CompactTextString(m) }
func (*RoutesCatalog) ProtoMessage()               {}
func (*RoutesCatalog) Descriptor() ([]byte, []int) { return fileDescriptorRoutes, []int{1} }

type Service struct {
	Name           string       `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Namespace      string       `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Description    string       `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Hostname       string       `protobuf:"bytes,4,opt,name=hostname,proto3" json:"hostname,omitempty"`
	URIPrefix      string       `protobuf:"bytes,5,opt,name=uri_prefix,json=uriPrefix,proto3" json:"uri_prefix,omitempty"`
	Version        *Version     `protobuf:"bytes,6,opt,name=version" json:"version,omitempty"`
	Authentication string       `protobuf:"bytes,7,opt,name=authentication,proto3" json:"authentication,omitempty"`
	RoutingRules   RoutingRules `protobuf:"bytes,8,opt,name=routing_rules,json=routingRules" json:"routing_rules"`
	Operations     []Operation  `protobuf:"bytes,9,rep,name=operations" json:"operations"`
	HealthCheck    *HealthCheck `protobuf:"bytes,10,opt,name=health_check,json=healthCheck" json:"health_check,omitempty"`
}

func (m *Service) Reset()                    { *m = Service{} }
func (m *Service) String() string            { return proto1.CompactTextString(m) }
func (*Service) ProtoMessage()               {}
func (*Service) Descriptor() ([]byte, []int) { return fileDescriptorRoutes, []int{2} }

type Operation struct {
	Name         string       `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Method       string       `protobuf:"bytes,2,opt,name=method,proto3" json:"method,omitempty"`
	URIPattern   string       `protobuf:"bytes,3,opt,name=uri_pattern,json=uriPattern,proto3" json:"uri_pattern,omitempty"`
	RoutingRules RoutingRules `protobuf:"bytes,4,opt,name=routing_rules,json=routingRules" json:"routing_rules"`
}

func (m *Operation) Reset()                    { *m = Operation{} }
func (m *Operation) String() string            { return proto1.CompactTextString(m) }
func (*Operation) ProtoMessage()               {}
func (*Operation) Descriptor() ([]byte, []int) { return fileDescriptorRoutes, []int{3} }

type RoutingRules struct {
	Selectors    []string        `protobuf:"bytes,1,rep,name=selectors" json:"selectors,omitempty"`
	RewriteRules []Configuration `protobuf:"bytes,2,rep,name=rewrite_rules,json=rewriteRules" json:"rewrite_rules"`
	Timeout      *time.Duration  `protobuf:"bytes,3,opt,name=timeout,stdduration" json:"timeout,omitempty"`
	Retry        *Retry          `protobuf:"bytes,4,opt,name=retry" json:"retry,omitempty"`
	Policies     []Configuration `protobuf:"bytes,5,rep,name=policies" json:"policies"`
}

func (m *RoutingRules) Reset()                    { *m = RoutingRules{} }
func (m *RoutingRules) String() string            { return proto1.CompactTextString(m) }
func (*RoutingRules) ProtoMessage()               {}
func (*RoutingRules) Descriptor() ([]byte, []int) { return fileDescriptorRoutes, []int{4} }

type Configuration struct {
	Type   string     `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Config Attributes `protobuf:"bytes,2,opt,name=config" json:"config"`
}

func (m *Configuration) Reset()                    { *m = Configuration{} }
func (m *Configuration) String() string            { return proto1.CompactTextString(m) }
func (*Configuration) ProtoMessage()               {}
func (*Configuration) Descriptor() ([]byte, []int) { return fileDescriptorRoutes, []int{5} }

type Version struct {
	VersionLocations []string `protobuf:"bytes,1,rep,name=version_locations,json=versionLocations" json:"version_locations,omitempty"`
	DefaultVersion   string   `protobuf:"bytes,2,opt,name=default_version,json=defaultVersion,proto3" json:"default_version,omitempty"`
}

func (m *Version) Reset()                    { *m = Version{} }
func (m *Version) String() string            { return proto1.CompactTextString(m) }
func (*Version) ProtoMessage()               {}
func (*Version) Descriptor() ([]byte, []int) { return fileDescriptorRoutes, []int{6} }

type Retry struct {
	Attempts           int32         `protobuf:"varint,1,opt,name=attempts,proto3" json:"attempts,omitempty"`
	ResponseClassifier string        `protobuf:"bytes,2,opt,name=responseClassifier,proto3" json:"responseClassifier,omitempty"`
	PerTryTimeout      time.Duration `protobuf:"bytes,3,opt,name=per_try_timeout,json=perTryTimeout,stdduration" json:"per_try_timeout"`
}

func (m *Retry) Reset()                    { *m = Retry{} }
func (m *Retry) String() string            { return proto1.CompactTextString(m) }
func (*Retry) ProtoMessage()               {}
func (*Retry) Descriptor() ([]byte, []int) { return fileDescriptorRoutes, []int{7} }

type HealthCheck struct {
	Timeout            time.Duration `protobuf:"bytes,1,opt,name=timeout,stdduration" json:"timeout"`
	Interval           time.Duration `protobuf:"bytes,2,opt,name=interval,stdduration" json:"interval"`
	UnhealthyThreshold uint32        `protobuf:"varint,3,opt,name=unhealthy_threshold,json=unhealthyThreshold,proto3" json:"unhealthy_threshold,omitempty"`
	HealthyThreshold   uint32        `protobuf:"varint,4,opt,name=healthy_threshold,json=healthyThreshold,proto3" json:"healthy_threshold,omitempty"`
	CheckType          string        `protobuf:"bytes,5,opt,name=check_type,json=checkType,proto3" json:"check_type,omitempty"`
	CheckConfig        Attributes    `protobuf:"bytes,6,opt,name=check_config,json=checkConfig" json:"check_config"`
}

func (m *HealthCheck) Reset()                    { *m = HealthCheck{} }
func (m *HealthCheck) String() string            { return proto1.CompactTextString(m) }
func (*HealthCheck) ProtoMessage()               {}
func (*HealthCheck) Descriptor() ([]byte, []int) { return fileDescriptorRoutes, []int{8} }

func init() {
	proto1.RegisterType((*RoutesRequest)(nil), "prizem.api.v1.RoutesRequest")
	proto1.RegisterType((*RoutesCatalog)(nil), "prizem.api.v1.RoutesCatalog")
	proto1.RegisterType((*Service)(nil), "prizem.api.v1.Service")
	proto1.RegisterType((*Operation)(nil), "prizem.api.v1.Operation")
	proto1.RegisterType((*RoutingRules)(nil), "prizem.api.v1.RoutingRules")
	proto1.RegisterType((*Configuration)(nil), "prizem.api.v1.Configuration")
	proto1.RegisterType((*Version)(nil), "prizem.api.v1.Version")
	proto1.RegisterType((*Retry)(nil), "prizem.api.v1.Retry")
	proto1.RegisterType((*HealthCheck)(nil), "prizem.api.v1.HealthCheck")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for RouteDiscovery service

type RouteDiscoveryClient interface {
	GetRoutes(ctx context.Context, in *RoutesRequest, opts ...grpc.CallOption) (*RoutesCatalog, error)
	StreamRoutes(ctx context.Context, opts ...grpc.CallOption) (RouteDiscovery_StreamRoutesClient, error)
}

type routeDiscoveryClient struct {
	cc *grpc.ClientConn
}

func NewRouteDiscoveryClient(cc *grpc.ClientConn) RouteDiscoveryClient {
	return &routeDiscoveryClient{cc}
}

func (c *routeDiscoveryClient) GetRoutes(ctx context.Context, in *RoutesRequest, opts ...grpc.CallOption) (*RoutesCatalog, error) {
	out := new(RoutesCatalog)
	err := grpc.Invoke(ctx, "/prizem.api.v1.RouteDiscovery/GetRoutes", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routeDiscoveryClient) StreamRoutes(ctx context.Context, opts ...grpc.CallOption) (RouteDiscovery_StreamRoutesClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_RouteDiscovery_serviceDesc.Streams[0], c.cc, "/prizem.api.v1.RouteDiscovery/StreamRoutes", opts...)
	if err != nil {
		return nil, err
	}
	x := &routeDiscoveryStreamRoutesClient{stream}
	return x, nil
}

type RouteDiscovery_StreamRoutesClient interface {
	Send(*RoutesRequest) error
	Recv() (*RoutesCatalog, error)
	grpc.ClientStream
}

type routeDiscoveryStreamRoutesClient struct {
	grpc.ClientStream
}

func (x *routeDiscoveryStreamRoutesClient) Send(m *RoutesRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *routeDiscoveryStreamRoutesClient) Recv() (*RoutesCatalog, error) {
	m := new(RoutesCatalog)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for RouteDiscovery service

type RouteDiscoveryServer interface {
	GetRoutes(context.Context, *RoutesRequest) (*RoutesCatalog, error)
	StreamRoutes(RouteDiscovery_StreamRoutesServer) error
}

func RegisterRouteDiscoveryServer(s *grpc.Server, srv RouteDiscoveryServer) {
	s.RegisterService(&_RouteDiscovery_serviceDesc, srv)
}

func _RouteDiscovery_GetRoutes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoutesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouteDiscoveryServer).GetRoutes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/prizem.api.v1.RouteDiscovery/GetRoutes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouteDiscoveryServer).GetRoutes(ctx, req.(*RoutesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RouteDiscovery_StreamRoutes_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RouteDiscoveryServer).StreamRoutes(&routeDiscoveryStreamRoutesServer{stream})
}

type RouteDiscovery_StreamRoutesServer interface {
	Send(*RoutesCatalog) error
	Recv() (*RoutesRequest, error)
	grpc.ServerStream
}

type routeDiscoveryStreamRoutesServer struct {
	grpc.ServerStream
}

func (x *routeDiscoveryStreamRoutesServer) Send(m *RoutesCatalog) error {
	return x.ServerStream.SendMsg(m)
}

func (x *routeDiscoveryStreamRoutesServer) Recv() (*RoutesRequest, error) {
	m := new(RoutesRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _RouteDiscovery_serviceDesc = grpc.ServiceDesc{
	ServiceName: "prizem.api.v1.RouteDiscovery",
	HandlerType: (*RouteDiscoveryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRoutes",
			Handler:    _RouteDiscovery_GetRoutes_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamRoutes",
			Handler:       _RouteDiscovery_StreamRoutes_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "routes.proto",
}

func (m *RoutesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoutesRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.NodeID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRoutes(dAtA, i, uint64(len(m.NodeID)))
		i += copy(dAtA[i:], m.NodeID)
	}
	if m.Version != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintRoutes(dAtA, i, uint64(m.Version))
	}
	return i, nil
}

func (m *RoutesCatalog) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoutesCatalog) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UseCache {
		dAtA[i] = 0x8
		i++
		if m.UseCache {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Version != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintRoutes(dAtA, i, uint64(m.Version))
	}
	if len(m.Services) > 0 {
		for _, msg := range m.Services {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintRoutes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *Service) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Service) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRoutes(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Namespace) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRoutes(dAtA, i, uint64(len(m.Namespace)))
		i += copy(dAtA[i:], m.Namespace)
	}
	if len(m.Description) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintRoutes(dAtA, i, uint64(len(m.Description)))
		i += copy(dAtA[i:], m.Description)
	}
	if len(m.Hostname) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintRoutes(dAtA, i, uint64(len(m.Hostname)))
		i += copy(dAtA[i:], m.Hostname)
	}
	if len(m.URIPrefix) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintRoutes(dAtA, i, uint64(len(m.URIPrefix)))
		i += copy(dAtA[i:], m.URIPrefix)
	}
	if m.Version != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintRoutes(dAtA, i, uint64(m.Version.Size()))
		n1, err := m.Version.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if len(m.Authentication) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintRoutes(dAtA, i, uint64(len(m.Authentication)))
		i += copy(dAtA[i:], m.Authentication)
	}
	dAtA[i] = 0x42
	i++
	i = encodeVarintRoutes(dAtA, i, uint64(m.RoutingRules.Size()))
	n2, err := m.RoutingRules.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n2
	if len(m.Operations) > 0 {
		for _, msg := range m.Operations {
			dAtA[i] = 0x4a
			i++
			i = encodeVarintRoutes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.HealthCheck != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintRoutes(dAtA, i, uint64(m.HealthCheck.Size()))
		n3, err := m.HealthCheck.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}

func (m *Operation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Operation) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRoutes(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Method) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRoutes(dAtA, i, uint64(len(m.Method)))
		i += copy(dAtA[i:], m.Method)
	}
	if len(m.URIPattern) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintRoutes(dAtA, i, uint64(len(m.URIPattern)))
		i += copy(dAtA[i:], m.URIPattern)
	}
	dAtA[i] = 0x22
	i++
	i = encodeVarintRoutes(dAtA, i, uint64(m.RoutingRules.Size()))
	n4, err := m.RoutingRules.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n4
	return i, nil
}

func (m *RoutingRules) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoutingRules) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Selectors) > 0 {
		for _, s := range m.Selectors {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.RewriteRules) > 0 {
		for _, msg := range m.RewriteRules {
			dAtA[i] = 0x12
			i++
			i = encodeVarintRoutes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Timeout != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintRoutes(dAtA, i, uint64(types.SizeOfStdDuration(*m.Timeout)))
		n5, err := types.StdDurationMarshalTo(*m.Timeout, dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if m.Retry != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintRoutes(dAtA, i, uint64(m.Retry.Size()))
		n6, err := m.Retry.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	if len(m.Policies) > 0 {
		for _, msg := range m.Policies {
			dAtA[i] = 0x2a
			i++
			i = encodeVarintRoutes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *Configuration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Configuration) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Type) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRoutes(dAtA, i, uint64(len(m.Type)))
		i += copy(dAtA[i:], m.Type)
	}
	dAtA[i] = 0x12
	i++
	i = encodeVarintRoutes(dAtA, i, uint64(m.Config.Size()))
	n7, err := m.Config.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n7
	return i, nil
}

func (m *Version) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Version) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.VersionLocations) > 0 {
		for _, s := range m.VersionLocations {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.DefaultVersion) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRoutes(dAtA, i, uint64(len(m.DefaultVersion)))
		i += copy(dAtA[i:], m.DefaultVersion)
	}
	return i, nil
}

func (m *Retry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Retry) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Attempts != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRoutes(dAtA, i, uint64(m.Attempts))
	}
	if len(m.ResponseClassifier) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRoutes(dAtA, i, uint64(len(m.ResponseClassifier)))
		i += copy(dAtA[i:], m.ResponseClassifier)
	}
	dAtA[i] = 0x1a
	i++
	i = encodeVarintRoutes(dAtA, i, uint64(types.SizeOfStdDuration(m.PerTryTimeout)))
	n8, err := types.StdDurationMarshalTo(m.PerTryTimeout, dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n8
	return i, nil
}

func (m *HealthCheck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HealthCheck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintRoutes(dAtA, i, uint64(types.SizeOfStdDuration(m.Timeout)))
	n9, err := types.StdDurationMarshalTo(m.Timeout, dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n9
	dAtA[i] = 0x12
	i++
	i = encodeVarintRoutes(dAtA, i, uint64(types.SizeOfStdDuration(m.Interval)))
	n10, err := types.StdDurationMarshalTo(m.Interval, dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n10
	if m.UnhealthyThreshold != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintRoutes(dAtA, i, uint64(m.UnhealthyThreshold))
	}
	if m.HealthyThreshold != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintRoutes(dAtA, i, uint64(m.HealthyThreshold))
	}
	if len(m.CheckType) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintRoutes(dAtA, i, uint64(len(m.CheckType)))
		i += copy(dAtA[i:], m.CheckType)
	}
	dAtA[i] = 0x32
	i++
	i = encodeVarintRoutes(dAtA, i, uint64(m.CheckConfig.Size()))
	n11, err := m.CheckConfig.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n11
	return i, nil
}

func encodeVarintRoutes(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *RoutesRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.NodeID)
	if l > 0 {
		n += 1 + l + sovRoutes(uint64(l))
	}
	if m.Version != 0 {
		n += 1 + sovRoutes(uint64(m.Version))
	}
	return n
}

func (m *RoutesCatalog) Size() (n int) {
	var l int
	_ = l
	if m.UseCache {
		n += 2
	}
	if m.Version != 0 {
		n += 1 + sovRoutes(uint64(m.Version))
	}
	if len(m.Services) > 0 {
		for _, e := range m.Services {
			l = e.Size()
			n += 1 + l + sovRoutes(uint64(l))
		}
	}
	return n
}

func (m *Service) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovRoutes(uint64(l))
	}
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovRoutes(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovRoutes(uint64(l))
	}
	l = len(m.Hostname)
	if l > 0 {
		n += 1 + l + sovRoutes(uint64(l))
	}
	l = len(m.URIPrefix)
	if l > 0 {
		n += 1 + l + sovRoutes(uint64(l))
	}
	if m.Version != nil {
		l = m.Version.Size()
		n += 1 + l + sovRoutes(uint64(l))
	}
	l = len(m.Authentication)
	if l > 0 {
		n += 1 + l + sovRoutes(uint64(l))
	}
	l = m.RoutingRules.Size()
	n += 1 + l + sovRoutes(uint64(l))
	if len(m.Operations) > 0 {
		for _, e := range m.Operations {
			l = e.Size()
			n += 1 + l + sovRoutes(uint64(l))
		}
	}
	if m.HealthCheck != nil {
		l = m.HealthCheck.Size()
		n += 1 + l + sovRoutes(uint64(l))
	}
	return n
}

func (m *Operation) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovRoutes(uint64(l))
	}
	l = len(m.Method)
	if l > 0 {
		n += 1 + l + sovRoutes(uint64(l))
	}
	l = len(m.URIPattern)
	if l > 0 {
		n += 1 + l + sovRoutes(uint64(l))
	}
	l = m.RoutingRules.Size()
	n += 1 + l + sovRoutes(uint64(l))
	return n
}

func (m *RoutingRules) Size() (n int) {
	var l int
	_ = l
	if len(m.Selectors) > 0 {
		for _, s := range m.Selectors {
			l = len(s)
			n += 1 + l + sovRoutes(uint64(l))
		}
	}
	if len(m.RewriteRules) > 0 {
		for _, e := range m.RewriteRules {
			l = e.Size()
			n += 1 + l + sovRoutes(uint64(l))
		}
	}
	if m.Timeout != nil {
		l = types.SizeOfStdDuration(*m.Timeout)
		n += 1 + l + sovRoutes(uint64(l))
	}
	if m.Retry != nil {
		l = m.Retry.Size()
		n += 1 + l + sovRoutes(uint64(l))
	}
	if len(m.Policies) > 0 {
		for _, e := range m.Policies {
			l = e.Size()
			n += 1 + l + sovRoutes(uint64(l))
		}
	}
	return n
}

func (m *Configuration) Size() (n int) {
	var l int
	_ = l
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovRoutes(uint64(l))
	}
	l = m.Config.Size()
	n += 1 + l + sovRoutes(uint64(l))
	return n
}

func (m *Version) Size() (n int) {
	var l int
	_ = l
	if len(m.VersionLocations) > 0 {
		for _, s := range m.VersionLocations {
			l = len(s)
			n += 1 + l + sovRoutes(uint64(l))
		}
	}
	l = len(m.DefaultVersion)
	if l > 0 {
		n += 1 + l + sovRoutes(uint64(l))
	}
	return n
}

func (m *Retry) Size() (n int) {
	var l int
	_ = l
	if m.Attempts != 0 {
		n += 1 + sovRoutes(uint64(m.Attempts))
	}
	l = len(m.ResponseClassifier)
	if l > 0 {
		n += 1 + l + sovRoutes(uint64(l))
	}
	l = types.SizeOfStdDuration(m.PerTryTimeout)
	n += 1 + l + sovRoutes(uint64(l))
	return n
}

func (m *HealthCheck) Size() (n int) {
	var l int
	_ = l
	l = types.SizeOfStdDuration(m.Timeout)
	n += 1 + l + sovRoutes(uint64(l))
	l = types.SizeOfStdDuration(m.Interval)
	n += 1 + l + sovRoutes(uint64(l))
	if m.UnhealthyThreshold != 0 {
		n += 1 + sovRoutes(uint64(m.UnhealthyThreshold))
	}
	if m.HealthyThreshold != 0 {
		n += 1 + sovRoutes(uint64(m.HealthyThreshold))
	}
	l = len(m.CheckType)
	if l > 0 {
		n += 1 + l + sovRoutes(uint64(l))
	}
	l = m.CheckConfig.Size()
	n += 1 + l + sovRoutes(uint64(l))
	return n
}

func sovRoutes(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozRoutes(x uint64) (n int) {
	return sovRoutes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RoutesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRoutes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RoutesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RoutesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoutes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRoutes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoutes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRoutes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRoutes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoutesCatalog) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRoutes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RoutesCatalog: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RoutesCatalog: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UseCache", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoutes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UseCache = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoutes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Services", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoutes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRoutes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Services = append(m.Services, Service{})
			if err := m.Services[len(m.Services)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRoutes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRoutes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Service) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRoutes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Service: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Service: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoutes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRoutes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoutes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRoutes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoutes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRoutes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hostname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoutes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRoutes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hostname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field URIPrefix", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoutes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRoutes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.URIPrefix = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoutes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRoutes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Version == nil {
				m.Version = &Version{}
			}
			if err := m.Version.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authentication", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoutes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRoutes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authentication = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoutingRules", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoutes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRoutes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RoutingRules.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoutes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRoutes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Operations = append(m.Operations, Operation{})
			if err := m.Operations[len(m.Operations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HealthCheck", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoutes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRoutes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.HealthCheck == nil {
				m.HealthCheck = &HealthCheck{}
			}
			if err := m.HealthCheck.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRoutes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRoutes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Operation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRoutes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Operation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Operation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoutes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRoutes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Method", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoutes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRoutes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Method = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field URIPattern", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoutes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRoutes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.URIPattern = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoutingRules", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoutes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRoutes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RoutingRules.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRoutes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRoutes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoutingRules) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRoutes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RoutingRules: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RoutingRules: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Selectors", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoutes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRoutes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Selectors = append(m.Selectors, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewriteRules", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoutes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRoutes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RewriteRules = append(m.RewriteRules, Configuration{})
			if err := m.RewriteRules[len(m.RewriteRules)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timeout", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoutes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRoutes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Timeout == nil {
				m.Timeout = new(time.Duration)
			}
			if err := types.StdDurationUnmarshal(m.Timeout, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Retry", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoutes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRoutes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Retry == nil {
				m.Retry = &Retry{}
			}
			if err := m.Retry.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Policies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoutes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRoutes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Policies = append(m.Policies, Configuration{})
			if err := m.Policies[len(m.Policies)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRoutes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRoutes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Configuration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRoutes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Configuration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Configuration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoutes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRoutes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Config", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoutes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRoutes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Config.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRoutes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRoutes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Version) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRoutes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Version: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Version: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VersionLocations", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoutes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRoutes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VersionLocations = append(m.VersionLocations, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoutes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRoutes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DefaultVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRoutes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRoutes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Retry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRoutes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Retry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Retry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attempts", wireType)
			}
			m.Attempts = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoutes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Attempts |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResponseClassifier", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoutes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRoutes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResponseClassifier = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PerTryTimeout", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoutes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRoutes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := types.StdDurationUnmarshal(&m.PerTryTimeout, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRoutes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRoutes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HealthCheck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRoutes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HealthCheck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HealthCheck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timeout", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoutes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRoutes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := types.StdDurationUnmarshal(&m.Timeout, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Interval", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoutes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRoutes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := types.StdDurationUnmarshal(&m.Interval, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnhealthyThreshold", wireType)
			}
			m.UnhealthyThreshold = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoutes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UnhealthyThreshold |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HealthyThreshold", wireType)
			}
			m.HealthyThreshold = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoutes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HealthyThreshold |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CheckType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoutes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRoutes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CheckType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CheckConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoutes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRoutes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CheckConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRoutes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRoutes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRoutes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRoutes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRoutes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRoutes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthRoutes
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowRoutes
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipRoutes(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthRoutes = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRoutes   = fmt.Errorf("proto: integer overflow")
)

func init() { proto1.RegisterFile("routes.proto", fileDescriptorRoutes) }

var fileDescriptorRoutes = []byte{
	// 956 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x55, 0xcd, 0x8e, 0xe3, 0x44,
	0x10, 0x8e, 0x27, 0x93, 0x1f, 0x57, 0x92, 0xd9, 0xa5, 0x41, 0x2b, 0x33, 0x3b, 0x64, 0x22, 0xaf,
	0x04, 0x23, 0x7e, 0x3c, 0xcb, 0x70, 0x00, 0x0e, 0xbb, 0x88, 0x64, 0xc4, 0x32, 0x02, 0x2d, 0x2b,
	0xef, 0xc0, 0x01, 0x21, 0x59, 0x1e, 0xa7, 0x12, 0xb7, 0x70, 0xdc, 0xa6, 0xbb, 0x1d, 0x08, 0x27,
	0x1e, 0x63, 0x0f, 0x1c, 0x38, 0x72, 0x41, 0xe2, 0x31, 0xe6, 0x84, 0x78, 0x82, 0x81, 0x0d, 0x2f,
	0xc0, 0x23, 0xa0, 0x6e, 0x77, 0x9c, 0x4c, 0x26, 0x48, 0x11, 0xe2, 0xe4, 0xae, 0xaa, 0xaf, 0xaa,
	0x5c, 0xf5, 0x55, 0x57, 0x43, 0x9b, 0xb3, 0x5c, 0xa2, 0xf0, 0x32, 0xce, 0x24, 0x23, 0x9d, 0x8c,
	0xd3, 0xef, 0x71, 0xe2, 0x85, 0x19, 0xf5, 0xa6, 0x6f, 0xef, 0xbf, 0x35, 0xa6, 0x32, 0xce, 0x2f,
	0xbc, 0x88, 0x4d, 0x8e, 0xc7, 0x6c, 0xcc, 0x8e, 0x35, 0xea, 0x22, 0x1f, 0x69, 0x49, 0x0b, 0xfa,
	0x54, 0x78, 0xef, 0x77, 0xc7, 0x8c, 0x8d, 0x13, 0x5c, 0xa2, 0x86, 0x39, 0x0f, 0x25, 0x65, 0xa9,
	0xb1, 0xdf, 0x0e, 0xa5, 0xe4, 0xf4, 0x62, 0x99, 0xcf, 0x7d, 0x0c, 0x1d, 0x5f, 0xe7, 0xf7, 0xf1,
	0x9b, 0x1c, 0x85, 0x24, 0xf7, 0xa0, 0x91, 0xb2, 0x21, 0x06, 0x74, 0xe8, 0x58, 0x3d, 0xeb, 0xc8,
	0xee, 0xc3, 0xfc, 0xea, 0xb0, 0xfe, 0x98, 0x0d, 0xf1, 0xec, 0xd4, 0xaf, 0x2b, 0xd3, 0xd9, 0x90,
	0x38, 0xd0, 0x98, 0x22, 0x17, 0x94, 0xa5, 0xce, 0x4e, 0xcf, 0x3a, 0xaa, 0xfa, 0x0b, 0xd1, 0xfd,
	0xc1, 0x5a, 0x04, 0x1c, 0x84, 0x32, 0x4c, 0xd8, 0x98, 0xdc, 0x05, 0x3b, 0x17, 0x18, 0x44, 0x61,
	0x14, 0xa3, 0x0e, 0xd9, 0xf4, 0x9b, 0xb9, 0xc0, 0x81, 0x92, 0xff, 0x3d, 0x10, 0x79, 0x0f, 0x9a,
	0x02, 0xf9, 0x94, 0x46, 0x28, 0x9c, 0x6a, 0xaf, 0x7a, 0xd4, 0x3a, 0xb9, 0xe3, 0x5d, 0xeb, 0x8d,
	0xf7, 0xb4, 0x30, 0xf7, 0x77, 0x2f, 0xaf, 0x0e, 0x2b, 0x7e, 0x89, 0x76, 0x2f, 0xab, 0xd0, 0x30,
	0x36, 0x42, 0x60, 0x37, 0x0d, 0x27, 0x45, 0x5e, 0xdb, 0xd7, 0x67, 0x72, 0x00, 0xb6, 0xfa, 0x8a,
	0x2c, 0x8c, 0x50, 0x67, 0xb5, 0xfd, 0xa5, 0x82, 0xf4, 0xa0, 0x35, 0x44, 0x11, 0x71, 0x9a, 0xa9,
	0xbe, 0x39, 0x55, 0x6d, 0x5f, 0x55, 0x91, 0x7d, 0x68, 0xc6, 0x4c, 0x48, 0x1d, 0x77, 0x57, 0x9b,
	0x4b, 0x99, 0xbc, 0x09, 0x90, 0x73, 0x1a, 0x64, 0x1c, 0x47, 0xf4, 0x3b, 0xa7, 0xa6, 0x1b, 0xd8,
	0x99, 0x5f, 0x1d, 0xda, 0x9f, 0xfb, 0x67, 0x4f, 0xb4, 0xd2, 0xb7, 0x73, 0x4e, 0x8b, 0x23, 0xb9,
	0xbf, 0xac, 0xbe, 0xde, 0xb3, 0x36, 0x94, 0xf8, 0x45, 0x61, 0x5d, 0x76, 0xe5, 0x55, 0xd8, 0x0b,
	0x73, 0x19, 0x63, 0x2a, 0x69, 0xa4, 0x89, 0x75, 0x1a, 0xfa, 0x0f, 0xd6, 0xb4, 0xe4, 0x23, 0xe8,
	0xa8, 0xb1, 0xa2, 0xe9, 0x38, 0xe0, 0x79, 0x82, 0xc2, 0x69, 0xea, 0xf8, 0x77, 0xd7, 0xe2, 0xfb,
	0x05, 0xc6, 0x57, 0x10, 0xd3, 0xc7, 0x36, 0x5f, 0xd1, 0x91, 0x87, 0x00, 0x2c, 0xc3, 0x62, 0x86,
	0x84, 0x63, 0x6b, 0x1e, 0x9c, 0xb5, 0x20, 0x9f, 0x2d, 0x00, 0x26, 0xc2, 0x8a, 0x07, 0x79, 0x00,
	0xed, 0x18, 0xc3, 0x44, 0xc6, 0x41, 0x14, 0x63, 0xf4, 0xb5, 0x03, 0xfa, 0x37, 0xf6, 0xd7, 0x22,
	0x7c, 0xac, 0x21, 0x03, 0x85, 0xf0, 0x5b, 0xf1, 0x52, 0x70, 0x7f, 0xb5, 0xc0, 0x2e, 0xc3, 0x6f,
	0x24, 0xf3, 0x0e, 0xd4, 0x27, 0x28, 0x63, 0x36, 0x34, 0x4c, 0x1a, 0x89, 0x1c, 0x43, 0x4b, 0x13,
	0x11, 0x4a, 0x89, 0xdc, 0xd0, 0xd8, 0xdf, 0x9b, 0x5f, 0x1d, 0x82, 0x62, 0xa2, 0xd0, 0xfa, 0x8a,
	0x2b, 0x73, 0xbe, 0xd9, 0xb1, 0xdd, 0xff, 0xd4, 0x31, 0xf7, 0xc7, 0x1d, 0x68, 0xaf, 0x82, 0xd4,
	0xb8, 0x09, 0x4c, 0x30, 0x92, 0x8c, 0x0b, 0xc7, 0xea, 0x55, 0xd5, 0xb8, 0x95, 0x0a, 0xf2, 0x08,
	0x3a, 0x1c, 0xbf, 0xe5, 0x54, 0xa2, 0x49, 0xbb, 0xa3, 0x7b, 0x7c, 0xb0, 0x96, 0x76, 0xc0, 0xd2,
	0x11, 0x1d, 0xe7, 0xd7, 0xfa, 0xdc, 0x36, 0x8e, 0x45, 0x9a, 0xf7, 0xa1, 0x21, 0xe9, 0x04, 0x59,
	0x2e, 0x75, 0xb1, 0xad, 0x93, 0x97, 0xbd, 0x62, 0x19, 0x78, 0x8b, 0x65, 0xe0, 0x9d, 0x96, 0xfe,
	0xcf, 0xfe, 0x38, 0xb4, 0xfc, 0x05, 0x9e, 0xbc, 0x0e, 0x35, 0x8e, 0x92, 0xcf, 0x4c, 0xc9, 0x2f,
	0xad, 0x97, 0xac, 0x6c, 0x7e, 0x01, 0x21, 0x0f, 0xa1, 0x99, 0xb1, 0x84, 0x46, 0x14, 0x85, 0x53,
	0xdb, 0xfa, 0x57, 0x4b, 0x1f, 0xf7, 0x2b, 0xe8, 0x5c, 0x03, 0x28, 0x52, 0xe5, 0x2c, 0x2b, 0x49,
	0x55, 0x67, 0xf2, 0x2e, 0xd4, 0x23, 0x0d, 0xd2, 0xa4, 0xaa, 0x52, 0xae, 0xa7, 0xf8, 0xb0, 0xdc,
	0x62, 0x26, 0xbe, 0x81, 0xbb, 0x01, 0x34, 0xcc, 0x95, 0x21, 0x6f, 0xc0, 0x0b, 0xe6, 0xd2, 0x04,
	0x09, 0x8b, 0xcc, 0x00, 0x17, 0xed, 0xbf, 0x6d, 0x0c, 0x9f, 0x2e, 0xf4, 0xe4, 0x35, 0xb8, 0x35,
	0xc4, 0x51, 0x98, 0x27, 0x32, 0x58, 0x5d, 0x47, 0xb6, 0xbf, 0x67, 0xd4, 0x26, 0xaa, 0xfb, 0x93,
	0x05, 0x35, 0xdd, 0x0f, 0xb5, 0x05, 0xd4, 0xe4, 0x4c, 0x32, 0x29, 0xf4, 0xbf, 0xd7, 0xfc, 0x52,
	0x26, 0x1e, 0x10, 0x8e, 0x22, 0x63, 0xa9, 0xc0, 0x41, 0x12, 0x0a, 0x41, 0x47, 0x14, 0xb9, 0x89,
	0xb8, 0xc1, 0x42, 0x3e, 0x81, 0x5b, 0x19, 0xf2, 0x40, 0xf2, 0x59, 0xb0, 0x35, 0x87, 0x4d, 0x55,
	0xb8, 0xe6, 0xb1, 0x93, 0x21, 0x3f, 0xe7, 0xb3, 0xf3, 0xc2, 0xd3, 0xfd, 0x6d, 0x07, 0x5a, 0x2b,
	0x17, 0x8a, 0x3c, 0x58, 0x0e, 0x86, 0xb5, 0x7d, 0xd0, 0x72, 0x38, 0x3e, 0x80, 0x26, 0x4d, 0x25,
	0xf2, 0x69, 0x98, 0x94, 0x6c, 0x6c, 0xe1, 0x5f, 0x3a, 0x91, 0x63, 0x78, 0x31, 0x4f, 0x8b, 0x4b,
	0x3d, 0x0b, 0x64, 0xcc, 0x51, 0xc4, 0x2c, 0x19, 0xea, 0x02, 0x3b, 0x3e, 0x29, 0x4d, 0xe7, 0x0b,
	0x8b, 0x62, 0xee, 0x26, 0x7c, 0x57, 0xc3, 0x6f, 0xdf, 0x00, 0xbf, 0x02, 0xa0, 0x37, 0x4b, 0xa0,
	0x87, 0xa8, 0x56, 0x6c, 0x73, 0xad, 0x39, 0x57, 0x93, 0xd4, 0x87, 0x76, 0x61, 0x36, 0xf3, 0x54,
	0xdf, 0x6e, 0x9e, 0x5a, 0xda, 0xa9, 0x18, 0xd4, 0x93, 0x5f, 0x2c, 0xd8, 0xd3, 0x4f, 0xda, 0x29,
	0x15, 0x11, 0x9b, 0x22, 0x9f, 0x91, 0x33, 0xb0, 0x1f, 0xa1, 0x2c, 0xde, 0x39, 0x72, 0xb0, 0x61,
	0x45, 0x94, 0xef, 0xe9, 0xfe, 0x66, 0xab, 0x79, 0x1c, 0xdd, 0x0a, 0x79, 0x02, 0xed, 0xa7, 0x92,
	0x63, 0x38, 0xf9, 0x3f, 0xa2, 0x1d, 0x59, 0xf7, 0xad, 0xfe, 0xbd, 0xcb, 0xe7, 0xdd, 0xca, 0xdf,
	0xcf, 0xbb, 0x95, 0x9f, 0xe7, 0xdd, 0xca, 0xe5, 0xbc, 0x6b, 0xfd, 0x3e, 0xef, 0x5a, 0x7f, 0xce,
	0xbb, 0xd6, 0xb3, 0xbf, 0xba, 0x95, 0x2f, 0x6b, 0x05, 0x6b, 0x75, 0xfd, 0x79, 0xe7, 0x9f, 0x00,
	0x00, 0x00, 0xff, 0xff, 0x4e, 0x1c, 0x53, 0xb2, 0x7e, 0x08, 0x00, 0x00,
}
